openapi: 3.0.2
info:
  version: 1.0.0
  title: Slim API
  contact:
    name: Company
    url: 'https://example.com'
    email: apiteam@example.com
  description: |-
    This is a sample RESTful Server based on the OpenAPI 3.0 specification. You can find out more about
    Swagger at [https://swagger.io](https://swagger.io).
  license:
    name: Proprietary License
    url: 'https://en.wikipedia.org/wiki/Proprietary_software'
externalDocs:
  description: External Documentation
  url: 'https://example.com/documentation'
servers:
  - url: 'https://test.example.com/api/v1'
    description: Test
  - url: 'https://staging.example.com/api/v1'
    description: Staging
  - url: 'https://example.com/api/v1'
    description: Production
tags:
  - name: User
security:
  - BasicAuth: []
paths:
  '/users':
    get:
      tags:
        - User
      summary: List users
      description: 'My description.'
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - User
      summary: Create user
      description: 'My description.'
      operationId: createUser
      requestBody:
        description: Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    format: int32
                    example: 10
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
  '/users/{user_id}':
    get:
      tags:
        - User
      summary: Get user
      description: 'My description.'
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: 'The ID that needs to be fetched. Use 1 for testing.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - User
      summary: Update user
      description: 'My description.'
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: ID that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - User
      summary: Delete user
      description: 'My description.'
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: The ID that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '422':
          $ref: '#/components/responses/422'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  responses:
    '200':
      description: OK.
      content:
        application/json: {}
    '201':
      description: Created.
      content:
        application/json: {}
    '204':
      description: Successfully processed.
      content:
        application/json: {}
    '400':
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Your request does not seem to be valid.
              details:
                - message: 'A more detailed report, if available.'
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Authorization information is missing or invalid.
    '403':
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Forbidden. You are not allowed to access this location.
    '404':
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Not Found.
    '405':
      description: Method not allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Request Method not allowed.
    '406':
      description: Not acceptable.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: The requested format is not supported.
    '415':
      description: Unsupported Media Type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: The media type is not supported.
    '422':
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Input validation failed
              details:
                - field: email
                  message: Invalid email address.
    '500':
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Unexpected internal Server Error.
              details:
                - message: 'A more detailed report, if available.'
    '503':
      description: 'Service Unavailable, e.g. Maintenance.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              message: Service Unavailable.
              details:
                - message: Barakuda is currently under maintenance.
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        username:
          type: string
          example: john.doe
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'secret'
        role:
          type: integer
          format: int32
          example: 1
        locale:
          type: string
          example: 'en_US'
        enabled:
          type: boolean
          description: User Status
    Users:
      required:
        - users
      properties:
        users:
          type: array
          description: List of users
          items:
            $ref: '#/components/schemas/User'
    UserRequest:
      type: object
      properties:
        username:
          type: string
          example: john.doe
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 'secret'
        role:
          type: integer
          format: int32
          example: 1
        locale:
          type: string
          example: 'en_US'
        enabled:
          type: boolean
          description: User Status
    Error:
      required:
        - error
      properties:
        error:
          type: object
          required:
            - message
          properties:
            message:
              type: string
              description: The error message
            details:
              type: array
              items:
                $ref: '#/components/schemas/ErrorDetails'
              description: The error details (e.g. validation errors)

    ErrorDetails:
      properties:
        field:
          type: string
          description: The name of the invalid field
        message:
          type: string
          description: The error message
